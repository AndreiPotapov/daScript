#line 1 "ds2_lexer.cpp"

#line 3 "ds2_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define das2_yy_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer das2_yy_create_buffer
#endif

#ifdef yy_delete_buffer
#define das2_yy_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer das2_yy_delete_buffer
#endif

#ifdef yy_scan_buffer
#define das2_yy_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer das2_yy_scan_buffer
#endif

#ifdef yy_scan_string
#define das2_yy_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string das2_yy_scan_string
#endif

#ifdef yy_scan_bytes
#define das2_yy_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes das2_yy_scan_bytes
#endif

#ifdef yy_init_buffer
#define das2_yy_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer das2_yy_init_buffer
#endif

#ifdef yy_flush_buffer
#define das2_yy_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer das2_yy_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define das2_yy_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state das2_yy_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define das2_yy_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer das2_yy_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define das2_yypush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state das2_yypush_buffer_state
#endif

#ifdef yypop_buffer_state
#define das2_yypop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state das2_yypop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define das2_yyensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack das2_yyensure_buffer_stack
#endif

#ifdef yylex
#define das2_yylex_ALREADY_DEFINED
#else
#define yylex das2_yylex
#endif

#ifdef yyrestart
#define das2_yyrestart_ALREADY_DEFINED
#else
#define yyrestart das2_yyrestart
#endif

#ifdef yylex_init
#define das2_yylex_init_ALREADY_DEFINED
#else
#define yylex_init das2_yylex_init
#endif

#ifdef yylex_init_extra
#define das2_yylex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra das2_yylex_init_extra
#endif

#ifdef yylex_destroy
#define das2_yylex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy das2_yylex_destroy
#endif

#ifdef yyget_debug
#define das2_yyget_debug_ALREADY_DEFINED
#else
#define yyget_debug das2_yyget_debug
#endif

#ifdef yyset_debug
#define das2_yyset_debug_ALREADY_DEFINED
#else
#define yyset_debug das2_yyset_debug
#endif

#ifdef yyget_extra
#define das2_yyget_extra_ALREADY_DEFINED
#else
#define yyget_extra das2_yyget_extra
#endif

#ifdef yyset_extra
#define das2_yyset_extra_ALREADY_DEFINED
#else
#define yyset_extra das2_yyset_extra
#endif

#ifdef yyget_in
#define das2_yyget_in_ALREADY_DEFINED
#else
#define yyget_in das2_yyget_in
#endif

#ifdef yyset_in
#define das2_yyset_in_ALREADY_DEFINED
#else
#define yyset_in das2_yyset_in
#endif

#ifdef yyget_out
#define das2_yyget_out_ALREADY_DEFINED
#else
#define yyget_out das2_yyget_out
#endif

#ifdef yyset_out
#define das2_yyset_out_ALREADY_DEFINED
#else
#define yyset_out das2_yyset_out
#endif

#ifdef yyget_leng
#define das2_yyget_leng_ALREADY_DEFINED
#else
#define yyget_leng das2_yyget_leng
#endif

#ifdef yyget_text
#define das2_yyget_text_ALREADY_DEFINED
#else
#define yyget_text das2_yyget_text
#endif

#ifdef yyget_lineno
#define das2_yyget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno das2_yyget_lineno
#endif

#ifdef yyset_lineno
#define das2_yyset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno das2_yyset_lineno
#endif

#ifdef yyget_column
#define das2_yyget_column_ALREADY_DEFINED
#else
#define yyget_column das2_yyget_column
#endif

#ifdef yyset_column
#define das2_yyset_column_ALREADY_DEFINED
#else
#define yyset_column das2_yyset_column
#endif

#ifdef yywrap
#define das2_yywrap_ALREADY_DEFINED
#else
#define yywrap das2_yywrap
#endif

#ifdef yyget_lval
#define das2_yyget_lval_ALREADY_DEFINED
#else
#define yyget_lval das2_yyget_lval
#endif

#ifdef yyset_lval
#define das2_yyset_lval_ALREADY_DEFINED
#else
#define yyset_lval das2_yyset_lval
#endif

#ifdef yyalloc
#define das2_yyalloc_ALREADY_DEFINED
#else
#define yyalloc das2_yyalloc
#endif

#ifdef yyrealloc
#define das2_yyrealloc_ALREADY_DEFINED
#else
#define yyrealloc das2_yyrealloc
#endif

#ifdef yyfree
#define das2_yyfree_ALREADY_DEFINED
#else
#define yyfree das2_yyfree
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define das2_yywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 235
#define YY_END_OF_BUFFER 236
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[687] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       22,   22,    0,    0,  236,  235,  234,  226,  233,  234,
      131,  234,  234,  234,  234,  234,  172,  171,  234,  234,
      234,  234,  234,  234,  158,  158,  234,  234,  234,  234,
      234,  234,  130,  174,  234,  173,  234,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  176,  234,  175,
       21,   20,   19,   18,   14,   21,   15,   10,   11,   10,
       10,   10,    7,    6,   23,   22,   13,   12,  216,    0,
        0,  182,    0,    0,    0,    0,    0,    0,    0,    0,

      201,  205,  208,    0,    0,    3,  200,  211,  197,    0,
        0,    0,    0,  212,  198,  195,  179,  163,    4,    5,
      199,  164,  158,    0,  165,  154,  156,    0,  158,  169,
      154,  156,  177,  194,    0,    0,    0,    0,  196,  220,
      213,  181,  215,  225,  214,  218,  193,  191,  192,  130,
        0,  232,  210,  207,  130,  130,  130,  130,   88,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,   28,
      130,   79,   89,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,

      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  209,  180,  206,   17,   16,    9,    8,
       23,   22,    0,    0,  187,  186,  189,  183,  190,  184,
      188,  185,  202,  152,    0,    0,    0,    0,    0,    0,
        0,    0,  231,  229,  178,    0,  163,  167,    0,    0,
      233,    0,  157,  163,    0,  164,  168,    0,    0,  166,
      155,  153,  162,    0,    0,    0,  230,  228,  227,  219,
      222,  221,  217,  204,  130,  130,   36,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,   34,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,

       26,  130,  130,  130,  130,  130,  130,  110,  130,  130,
      130,   39,  130,   98,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,   46,  130,  130,  130,  130,  130,  130,
      130,   42,  130,  130,  130,  130,  130,  203,    0,    0,
      145,  145,  151,  146,  149,  148,  150,  147,    0,    0,
        0,    0,    0,  163,    0,    0,  163,  167,    0,    0,
      164,  166,  170,    0,  162,  160,  161,  161,    0,    0,
        0,    0,  224,  223,  130,   91,  130,  130,  102,  130,
      130,  103,  130,  130,   66,  130,  130,  130,  130,  130,

      130,  130,   30,   32,   45,  130,  130,  130,  130,  130,
      130,  130,  130,   51,  130,  130,  130,  130,  114,  115,
      116,  130,  111,  130,  130,  130,    0,    0,  130,   92,
      130,  130,  130,   68,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  100,  130,
       97,  117,  130,  130,  130,  130,    0,    0,  130,  104,
      130,  130,   35,  130,    0,    0,  138,  144,  144,  139,
      139,  142,  142,  141,  141,  143,  143,  140,  140,    0,
        0,  163,  161,  159,    0,  130,   75,  130,  130,   57,
       95,  130,   44,   63,  130,  130,  130,   90,  130,  130,

      130,  101,  130,  130,  126,  130,  130,  130,  130,  130,
      112,  113,  130,   50,  130,    0,  130,  130,  130,  130,
      130,  130,  108,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,   74,   61,  130,  130,  130,  122,  123,
      124,  130,  119,  130,  130,  130,  130,    0,  130,   65,
       27,   94,    0,    1,  137,  132,  135,  134,  136,  133,
        0,    0,    0,    0,  130,   37,  130,  130,  130,  130,
       99,  125,   73,  130,  130,  130,  127,  128,  129,  130,
      130,  130,  130,  130,  130,   59,    0,   38,   52,  130,
      130,  130,  130,   53,  130,  130,  130,  130,   93,   71,

       82,  130,   87,  105,   43,  130,  130,  120,  121,  130,
       85,   67,  109,    0,   40,  130,    0,  130,  130,   25,
      130,   77,  130,   33,  130,  130,  130,  130,   24,   86,
      130,  130,   54,  130,   83,  106,   47,  130,   56,  130,
      130,  130,   48,  130,  130,  130,   62,    0,   72,  118,
       64,   81,  130,   58,  130,   80,   78,   55,   70,  130,
      130,  130,  130,   49,   96,  130,  107,    2,  130,   60,
      130,   84,  130,   29,  130,  130,  130,  130,  130,   76,
       69,   31,  130,  130,   41,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   26,   28,   26,   29,   30,   31,
       32,   33,   34,    1,   35,   35,   35,   35,   36,   37,
       38,   38,   38,   38,   38,   39,   38,   38,   38,   38,
       38,   38,   38,   38,   40,   38,   38,   41,   38,   38,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   38,   57,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[76] =
    {   0,
        1,    2,    3,    2,    2,    1,    4,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    5,    1,
        6,    6,    6,    6,    6,    6,    6,    6,    1,    1,
        1,    1,    1,    1,    7,    7,    8,    9,   10,   10,
        9,    1,    1,    1,    1,   10,   11,    7,    7,    7,
        8,    7,    8,    9,    9,    9,    9,   12,    9,    9,
        9,    9,    9,    9,    9,    9,   10,    9,    9,    9,
        9,    9,    1,    1,    1
    } ;

static const flex_int16_t yy_base[723] =
    {   0,
        0,    0,    0,    0,   74,   80,   76,   82, 1251, 1250,
       90,   96, 1249, 1248, 1250, 1255, 1255, 1255, 1255, 1217,
     1255,   82,  102, 1216,  101, 1204, 1255, 1255,   93,   98,
      117,  106,  150,  111,  174,   48,  100,  160,  109,   83,
      102,  125,    0, 1255,  182, 1255,  134,  172,  182,  133,
       96,  147,  194,  151,  194,   94, 1185,   93,  120,  142,
      170,  210,  200,  210,  197,  175, 1189, 1255,  201, 1255,
     1255, 1255, 1255, 1255, 1255,  242, 1255, 1255, 1255, 1255,
     1224, 1228, 1255, 1255,    0,  214, 1255, 1255, 1255,  256,
     1190, 1255,    0,    0,    0,    0,    0,    0,    0,    0,

     1255, 1209, 1255, 1228,  244, 1255, 1255, 1255, 1255,  286,
      248, 1195, 1194, 1255, 1255, 1255, 1218,  341, 1255,  283,
     1255,  381,  187,  298, 1255, 1255,  270,    0,  273, 1255,
     1183,  279, 1255, 1255,  339,  279, 1191,  252, 1255,  269,
     1255, 1255, 1255, 1255, 1255,  300, 1255, 1255, 1255,    0,
      343, 1255, 1255, 1202, 1168, 1181, 1183, 1166, 1164, 1162,
     1161, 1165, 1164, 1172,  240, 1175, 1162,  296, 1154,  273,
     1153, 1157, 1160,  310, 1156, 1152, 1155, 1154, 1147,    0,
     1150,  285,    0, 1159,  322, 1144, 1158, 1139, 1149,  287,
     1154, 1140, 1148, 1154, 1142,  323, 1153, 1152, 1151,  160,

     1149,  285, 1135, 1134, 1135,  319, 1144, 1145, 1128, 1135,
      320, 1124, 1137, 1255, 1255, 1156, 1255, 1255, 1255, 1255,
        0,  353,  398, 1127, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255,  334, 1174, 1173, 1172, 1171, 1170, 1169,
     1165, 1176, 1255, 1255, 1255,  419, 1255, 1255, 1125,  392,
     1255,  393, 1255,  412,  434, 1255, 1255, 1124,  450,  429,
     1255, 1255,  371, 1157, 1160, 1171, 1255, 1255, 1255, 1141,
     1255, 1255, 1140, 1255, 1105, 1106,    0, 1121, 1101, 1106,
     1113, 1115, 1106, 1115, 1096, 1095, 1095,  322, 1111, 1106,
     1105, 1107, 1102, 1102, 1094,  333, 1087, 1103, 1098, 1101,

        0, 1098, 1095, 1085, 1087, 1086, 1093,  461, 1078, 1089,
     1091,  449, 1072,    0, 1080, 1073, 1080, 1071, 1069, 1065,
     1074, 1077, 1069, 1069, 1061, 1060, 1068, 1061, 1060, 1057,
      360, 1064, 1069,    0, 1062, 1067, 1052, 1057, 1068, 1067,
     1054,  488, 1062, 1048, 1053, 1055, 1051, 1255,  474, 1085,
     1079, 1078,  427,  439,  463,  464,  465,  467, 1090,  494,
     1101,  508,  494,  487,  395,  532, 1255, 1255, 1050,  540,
      488, 1255, 1255, 1049,  530, 1255,  543,  545, 1086,  522,
     1097,  572, 1255, 1255, 1035,    0, 1027, 1038,    0, 1040,
     1038,    0, 1037, 1026,    0, 1027, 1025, 1034, 1022, 1022,

     1034, 1028,    0,    0,    0, 1035, 1028, 1031, 1024, 1030,
     1014, 1013, 1014,    0, 1021, 1009, 1014, 1047,    0,    0,
        0, 1048,    0, 1024, 1013, 1019,  531, 1049, 1010,    0,
     1019, 1005, 1001,    0, 1016, 1007, 1010,  993,  994, 1003,
      994, 1005, 1004,  989,  998,  993, 1002,  999,    0,  998,
      529,  571,  993,  995,  982,  992,  585, 1025,  996,    0,
      991,  990,    0,  990, 1033, 1031, 1255, 1010, 1009, 1008,
     1007, 1006, 1005, 1004, 1003, 1002, 1001,  992,  951,  963,
      585,  567, 1255, 1255,  962,  927,    0,  896,  895,    0,
        0,  882,    0,    0,  884,  883,  888,    0,  887,  871,

      848,    0,  838,  845,  598,  834,  841,  837,  809,  796,
        0,    0,  791,    0,  808,  834,  784,  769,  774,  777,
      760,  775,  797,  771,  770,  751,  754,  762,  761,  765,
      754,  749,  736,    0,    0,  749,  740,  766,    0,    0,
        0,  767,    0,  725,  738,  723,  730,  778,  720,    0,
        0,    0,    0, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
      764,  566,  763,  599,  721,    0,  712,  717,  701,  701,
        0,    0,    0,  704,  688,  710,    0,    0,    0,  696,
      690,  685,  688,  670,  585,    0,  642, 1255,    0,  583,
      578,  591,  589,    0,  615,  575,  574,  585,    0,    0,

        0,  574,  589,    0,    0,  473,  581,    0,    0,  577,
        0,    0,  605,  628, 1255,  564,  622,  562,  576,    0,
      574,    0,  558,    0,  553,  555,  541,  534,    0,    0,
      527,  515,    0,  526,    0,    0,    0,  510,    0,  483,
      491,  471,    0,  466,  433,  443,    0,  428,    0,    0,
        0,    0,  366,    0,  364,    0,    0,    0,    0,  333,
      326,  324,  304,    0,    0,  278,    0, 1255,  286,    0,
      259,    0,  239,    0,  195,  118,   90,   96,   56,    0,
        0,    0,   38,   37,    0, 1255,  647,  659,  671,  683,
      695,  707,  719,  726,  738,  750,  761,  772,  783,  794,

      805,  816,  827,  838,  845,  849,  861,  873,  880,  887,
      899,  911,  923,  930,  937,  949,  961,  968,  980,  992,
     1004, 1016
    } ;

static const flex_int16_t yy_def[723] =
    {   0,
      687,  687,  686,    3,  688,  688,  689,  689,  690,  690,
      691,  691,  692,  692,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  693,  686,  686,  686,  686,
      686,  686,  686,  686,  686,   35,  686,  686,  686,  686,
      686,  686,  694,  686,  686,  686,  686,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  695,  686,  686,  686,  686,  686,
      686,  686,  696,  697,  698,  699,  700,  701,  702,  703,

      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  704,
      686,  686,   35,  686,  686,  686,  686,  705,  706,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  694,
      686,  686,  686,  686,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,

      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  686,  686,  686,  686,  686,  686,  686,
      695,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      707,  708,  686,  686,  686,  686,  686,  686,  686,  704,
      686,  704,  686,  122,  686,  686,  686,  686,  686,  709,
      686,  686,  710,  686,  711,  712,  686,  686,  686,  686,
      686,  686,  686,  686,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,

      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  707,  713,
      708,  686,  686,  714,  704,  686,  686,  686,  686,  686,
      715,  686,  686,  686,  710,  686,  686,  686,  711,  716,
      712,  686,  686,  686,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,

      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  686,  686,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  686,  686,  694,  694,
      694,  694,  694,  694,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  717,
      686,  718,  686,  686,  719,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,

      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  720,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  721,  694,  694,
      694,  694,  722,  686,  686,  686,  686,  686,  686,  686,
      717,  713,  719,  716,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  720,  686,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,

      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  721,  686,  694,  722,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  686,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  686,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,    0,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,

      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686
    } ;

static const flex_int16_t yy_nxt[1331] =
    {   0,
       17,   18,   19,   18,   18,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   36,   36,   36,   36,   36,   36,   37,   38,
       39,   40,   41,   42,   43,   43,   43,   43,   43,   43,
       43,   44,   45,   46,   47,   43,   17,   48,   49,   50,
       51,   52,   53,   54,   43,   55,   43,   56,   57,   58,
       59,   60,   43,   61,   62,   63,   64,   65,   66,   43,
       67,   43,   68,   69,   70,   72,   73,   74,   79,   80,
       75,   72,   73,   74,   79,   80,   75,  685,  686,  684,
       81,   86,   16,   16,   86,   82,   81,   86,   16,   16,

       86,   82,   90,   90,   90,   90,   90,   90,   90,   90,
       92,  102,  106,  108,  143,  144,   76,  686,  110,  110,
      110,  110,   76,  114,  107,  119,  139,  683,  133,  109,
      120,  134,  103,  145,  146,   91,  111,  115,  116,  140,
      141,  185,  121,  147,  188,  186,   77,  168,  682,   93,
       94,   95,   77,   96,   97,  681,  169,   98,  148,  189,
      112,  135,  135,  135,  135,  153,  149,   99,  117,  100,
      118,  118,  118,  118,  118,  118,  118,  118,  154,  136,
      165,  190,  142,  151,  152,  151,  151,  191,  680,  192,
      166,  113,  122,  167,  123,  123,  123,  123,  123,  123,

      123,  123,  178,  137,  170,  193,  171,  330,  194,  124,
      125,  179,  126,  127,  128,  222,  172,  195,  222,  129,
      155,  196,  156,  331,  130,  124,  125,  686,  157,  211,
      212,  131,  214,  215,  138,  158,  159,  161,  160,  162,
      132,  173,  163,  128,  209,  164,  180,  201,  217,  174,
      679,  175,  181,  182,  176,  234,  686,  210,  183,  184,
      177,  197,  241,  202,  198,  205,  203,  242,  199,  206,
      204,  207,  223,  208,  216,  200,   90,   90,   90,   90,
       90,   90,   90,   90,  218,  251,  235,  110,  110,  110,
      110,  264,  236,  265,  678,  268,  237,  261,  266,  270,

      271,  285,  252,  238,  286,  111,  261,  239,  262,  240,
      677,  126,  127,  259,  217,  259,  217,  262,  260,  260,
      260,  260,  260,  260,  260,  260,  269,  262,  293,  112,
      126,  272,  273,  676,  306,  675,  262,  294,  316,  132,
      135,  135,  135,  135,  151,  152,  151,  151,  289,  307,
      308,  333,  317,  290,  222,  334,  674,  222,  136,  291,
      113,  118,  118,  118,  118,  118,  118,  118,  118,  298,
      310,  344,  323,  351,  338,  345,  246,  247,  324,  299,
      311,  673,  137,  339,  406,  325,  397,  398,  326,  672,
      407,  248,  246,  247,  251,  251,  671,  251,  249,  253,

      352,  254,  254,  254,  254,  254,  254,  254,  254,  376,
      377,  252,  365,  138,  365,  446,  255,  256,  349,  349,
      349,  349,  349,  349,  349,  349,  447,  670,  376,  669,
      686,  257,  255,  256,  363,  668,  363,  378,  258,  364,
      364,  364,  364,  364,  364,  364,  364,  366,  367,  370,
      427,  370,  427,  427,  371,  371,  371,  371,  371,  371,
      371,  371,  368,  366,  367,  372,  468,  667,  428,  369,
      260,  260,  260,  260,  260,  260,  260,  260,  470,  373,
      666,  372,  418,  419,  420,  421,  374,  422,  423,  457,
      465,  457,  457,  469,  349,  349,  349,  349,  349,  349,

      349,  349,  472,  474,  476,  471,  478,  458,  360,  110,
      110,  110,  110,  362,  364,  364,  364,  364,  364,  364,
      364,  364,  642,  247,  256,  643,  665,  111,  664,  473,
      475,  477,  427,  479,  427,  427,  380,  248,  257,  247,
      256,  382,  662,  459,  249,  258,  663,  481,  661,  481,
      428,  112,  482,  482,  482,  482,  482,  482,  482,  482,
      371,  371,  371,  371,  371,  371,  371,  371,  376,  377,
      483,  660,  483,  135,  135,  135,  135,  659,  658,  536,
      562,  484,  113,  484,  537,  362,  457,  376,  457,  457,
      657,  136,  538,  539,  540,  541,  378,  542,  543,  656,

      484,  655,  484,  367,  458,  482,  482,  482,  482,  482,
      482,  482,  482,  564,  654,  137,  653,  368,  382,  367,
      577,  578,  579,  652,  369,  651,  650,  649,  648,  647,
      615,  646,  645,  644,  641,  640,  639,  638,  637,  636,
      635,  634,  633,  632,  588,  631,  138,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   85,   85,   85,   85,   85,

       85,   85,   85,   85,   85,   85,   85,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,  104,
      104,  630,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  150,  150,  150,  150,  150,  150,  150,  221,  629,
      628,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      225,  225,  225,  225,  225,  627,  626,  625,  624,  623,
      225,  226,  226,  226,  226,  226,  622,  621,  620,  619,
      618,  226,  227,  227,  227,  227,  227,  564,  562,  616,
      615,  613,  227,  228,  228,  228,  228,  228,  612,  611,
      610,  609,  608,  228,  229,  229,  229,  229,  229,  607,

      606,  605,  604,  603,  229,  230,  230,  230,  230,  230,
      602,  601,  600,  599,  598,  230,  231,  231,  231,  231,
      231,  597,  596,  595,  594,  593,  231,  232,  232,  232,
      232,  232,  592,  591,  590,  589,  588,  232,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      263,  263,  263,  129,  129,  586,  585,  584,  129,  583,
      129,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  260,  582,  260,  581,  580,
      576,  260,  375,  375,  375,  575,  375,  574,  375,  379,

      379,  379,  379,  379,  379,  379,  379,  379,  379,  379,
      379,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  364,  573,  364,  572,  571,
      570,  364,  371,  569,  371,  568,  567,  566,  371,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  482,  565,  482,  564,  562,  560,  482,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  587,  587,  587,  587,  587,  587,  587,  587,

      587,  587,  587,  587,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  617,  617,  617,  560,
      617,  617,  617,  617,  617,  617,  617,  617,  559,  559,
      558,  558,  557,  557,  556,  556,  555,  555,  554,  553,
      552,  551,  550,  549,  548,  547,  546,  545,  544,  535,
      534,  533,  532,  531,  530,  529,  528,  527,  526,  525,
      524,  523,  522,  521,  520,  519,  518,  517,  516,  515,
      514,  513,  512,  511,  510,  509,  508,  507,  506,  505,
      504,  503,  502,  501,  500,  499,  498,  497,  496,  495,
      494,  493,  492,  491,  490,  489,  488,  487,  486,  382,

      380,  373,  368,  362,  360,  467,  467,  466,  464,  463,
      462,  461,  460,  456,  455,  454,  453,  452,  451,  450,
      449,  448,  445,  444,  443,  442,  441,  440,  439,  438,
      437,  436,  435,  434,  433,  432,  431,  430,  429,  426,
      425,  424,  417,  416,  415,  414,  413,  412,  411,  410,
      409,  408,  405,  404,  403,  402,  401,  400,  399,  396,
      395,  394,  393,  392,  391,  390,  389,  388,  387,  386,
      385,  384,  383,  382,  380,  253,  257,  248,  362,  360,
      358,  357,  356,  355,  354,  353,  350,  348,  347,  346,
      343,  342,  341,  340,  337,  336,  335,  332,  329,  328,

      327,  322,  321,  320,  319,  318,  315,  314,  313,  312,
      309,  305,  304,  303,  302,  301,  300,  297,  296,  295,
      292,  288,  287,  284,  283,  282,  281,  280,  279,  278,
      277,  276,  275,  274,  267,  130,  245,  244,  243,  234,
      233,  224,  220,  219,  213,  187,  105,  101,   89,  686,
       88,   88,   84,   84,   15,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,

      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686
    } ;

static const flex_int16_t yy_chk[1331] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    5,    5,    5,    7,    7,
        5,    6,    6,    6,    8,    8,    6,  684,   36,  683,
        7,   11,   11,   11,   11,    7,    8,   12,   12,   12,

       12,    8,   22,   22,   22,   22,   22,   22,   22,   22,
       23,   25,   29,   30,   40,   40,    5,   36,   31,   31,
       31,   31,    6,   32,   29,   34,   39,  679,   37,   30,
       34,   37,   25,   41,   41,   22,   31,   32,   32,   39,
       39,   56,   34,   42,   58,   56,    5,   51,  678,   23,
       23,   23,    6,   23,   23,  677,   51,   23,   42,   58,
       31,   38,   38,   38,   38,   47,   42,   23,   33,   23,
       33,   33,   33,   33,   33,   33,   33,   33,   47,   38,
       50,   59,   39,   45,   45,   45,   45,   59,  676,   60,
       50,   31,   35,   50,   35,   35,   35,   35,   35,   35,

       35,   35,   54,   38,   52,   60,   52,  200,   60,   35,
       35,   54,   35,   35,   35,   86,   52,   61,   86,   35,
       48,   61,   48,  200,   35,   35,   35,  123,   48,   66,
       66,   35,   69,   69,   38,   48,   48,   49,   48,   49,
       35,   53,   49,   35,   65,   49,   55,   63,   76,   53,
      675,   53,   55,   55,   53,  105,  123,   65,   55,   55,
       53,   62,  111,   63,   62,   64,   63,  111,   62,   64,
       63,   64,   90,   64,   69,   62,   90,   90,   90,   90,
       90,   90,   90,   90,   76,  120,  105,  110,  110,  110,
      110,  129,  105,  136,  673,  138,  105,  127,  136,  140,

      140,  165,  120,  105,  165,  110,  132,  105,  127,  105,
      671,  129,  129,  124,   76,  124,   76,  132,  124,  124,
      124,  124,  124,  124,  124,  124,  138,  127,  170,  110,
      129,  146,  146,  669,  182,  666,  132,  170,  190,  129,
      135,  135,  135,  135,  151,  151,  151,  151,  168,  182,
      182,  202,  190,  168,  222,  202,  663,  222,  135,  168,
      110,  118,  118,  118,  118,  118,  118,  118,  118,  174,
      185,  211,  196,  234,  206,  211,  118,  118,  196,  174,
      185,  662,  135,  206,  296,  196,  288,  288,  196,  661,
      296,  118,  118,  118,  250,  252,  660,  365,  118,  122,

      234,  122,  122,  122,  122,  122,  122,  122,  122,  263,
      263,  250,  252,  135,  365,  331,  122,  122,  223,  223,
      223,  223,  223,  223,  223,  223,  331,  655,  263,  653,
      254,  122,  122,  122,  246,  648,  246,  263,  122,  246,
      246,  246,  246,  246,  246,  246,  246,  254,  254,  255,
      312,  255,  312,  312,  255,  255,  255,  255,  255,  255,
      255,  255,  254,  254,  254,  260,  353,  646,  312,  254,
      259,  259,  259,  259,  259,  259,  259,  259,  354,  260,
      645,  260,  308,  308,  308,  308,  260,  308,  308,  342,
      349,  342,  342,  353,  349,  349,  349,  349,  349,  349,

      349,  349,  355,  356,  357,  354,  358,  342,  360,  362,
      362,  362,  362,  360,  363,  363,  363,  363,  363,  363,
      363,  363,  606,  364,  371,  606,  644,  362,  642,  355,
      356,  357,  427,  358,  427,  427,  380,  364,  371,  364,
      371,  380,  641,  342,  364,  371,  641,  366,  640,  366,
      427,  362,  366,  366,  366,  366,  366,  366,  366,  366,
      370,  370,  370,  370,  370,  370,  370,  370,  375,  375,
      377,  638,  378,  382,  382,  382,  382,  634,  632,  451,
      562,  377,  362,  378,  451,  562,  457,  375,  457,  457,
      631,  382,  452,  452,  452,  452,  375,  452,  452,  628,

      377,  627,  378,  482,  457,  481,  481,  481,  481,  481,
      481,  481,  481,  564,  626,  382,  625,  482,  564,  482,
      505,  505,  505,  623,  482,  621,  619,  618,  617,  616,
      614,  613,  610,  607,  603,  602,  598,  597,  596,  595,
      593,  592,  591,  590,  587,  585,  382,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  691,  691,  691,  691,  691,

      691,  691,  691,  691,  691,  691,  691,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  693,
      693,  584,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  694,  694,  694,  694,  694,  694,  694,  695,  583,
      582,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      696,  696,  696,  696,  696,  581,  580,  576,  575,  574,
      696,  697,  697,  697,  697,  697,  570,  569,  568,  567,
      565,  697,  698,  698,  698,  698,  698,  563,  561,  549,
      548,  547,  698,  699,  699,  699,  699,  699,  546,  545,
      544,  542,  538,  699,  700,  700,  700,  700,  700,  537,

      536,  533,  532,  531,  700,  701,  701,  701,  701,  701,
      530,  529,  528,  527,  526,  701,  702,  702,  702,  702,
      702,  525,  524,  523,  522,  521,  702,  703,  703,  703,
      703,  703,  520,  519,  518,  517,  516,  703,  704,  704,
      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      705,  705,  705,  706,  706,  515,  513,  510,  706,  509,
      706,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  709,  508,  709,  507,  506,
      504,  709,  710,  710,  710,  503,  710,  501,  710,  711,

      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  714,  500,  714,  499,  497,
      496,  714,  715,  495,  715,  492,  489,  488,  715,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  718,  486,  718,  485,  480,  479,  718,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  720,  720,  720,  720,  720,  720,  720,  720,

      720,  720,  720,  720,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  722,  722,  722,  478,
      722,  722,  722,  722,  722,  722,  722,  722,  477,  476,
      475,  474,  473,  472,  471,  470,  469,  468,  466,  465,
      464,  462,  461,  459,  458,  456,  455,  454,  453,  450,
      448,  447,  446,  445,  444,  443,  442,  441,  440,  439,
      438,  437,  436,  435,  433,  432,  431,  429,  428,  426,
      425,  424,  422,  418,  417,  416,  415,  413,  412,  411,
      410,  409,  408,  407,  406,  402,  401,  400,  399,  398,
      397,  396,  394,  393,  391,  390,  388,  387,  385,  381,

      379,  374,  369,  361,  359,  352,  351,  350,  347,  346,
      345,  344,  343,  341,  340,  339,  338,  337,  336,  335,
      333,  332,  330,  329,  328,  327,  326,  325,  324,  323,
      322,  321,  320,  319,  318,  317,  316,  315,  313,  311,
      310,  309,  307,  306,  305,  304,  303,  302,  300,  299,
      298,  297,  295,  294,  293,  292,  291,  290,  289,  287,
      286,  285,  284,  283,  282,  281,  280,  279,  278,  276,
      275,  273,  270,  266,  265,  264,  258,  249,  242,  241,
      240,  239,  238,  237,  236,  235,  224,  216,  213,  212,
      210,  209,  208,  207,  205,  204,  203,  201,  199,  198,

      197,  195,  194,  193,  192,  191,  189,  188,  187,  186,
      184,  181,  179,  178,  177,  176,  175,  173,  172,  171,
      169,  167,  166,  164,  163,  162,  161,  160,  159,  158,
      157,  156,  155,  154,  137,  131,  117,  113,  112,  104,
      102,   91,   82,   81,   67,   57,   26,   24,   20,   15,
       14,   13,   10,    9,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,

      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[236] =
    {   0,
0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "ds2_lexer.lpp"
#line 2 "ds2_lexer.lpp"
    #include "daScript/misc/platform.h"
    #include <inttypes.h>
    #include <fast_float/fast_float.h>
    #include "daScript/ast/ast.h"
    #include "parser_state.h"
    #include "ds2_parser.hpp"

    #ifndef SCNi64
      #define SCNi64       "lli"
    #endif
    #ifndef SCNu64
      #define SCNu64       "llu"
    #endif
    #ifndef SCNx64
      #define SCNx64       "llx"
    #endif

    using namespace das;

    union DAS2_YYSTYPE;
    typedef DAS2_YYSTYPE YYSTYPE;

    #define YY_NO_INPUT

    void das2_yyfatalerror ( DAS2_YYLTYPE * lloc, yyscan_t scanner, const string & error, CompilationError cerr = CompilationError::syntax_error );
    LineInfo tokAt ( yyscan_t scanner, const struct DAS2_YYLTYPE & li );

    #define YY_USER_ACTION \
        yylloc_param->first_line = yylloc_param->last_line = \
            (yytext[yyleng - 1] == '\n' || yytext[yyleng - 1] == '\r') ? yylineno - 1 : yylineno; \
        yylloc_param->first_column = yyextra->das_yycolumn; \
        yylloc_param->last_column = yyextra->das_yycolumn + yyleng; \
        YYCOLUMN (yyextra->das_yycolumn += yyleng, "YY_USER_ACTION");

#ifdef FLEX_DEBUG
    void YYCOLUMN ( int, const char * comment ) {
        printf("%i:%i %s\n", yyextra->das_yycolumn, yylineno, comment ? comment : "");
    }
#else
    #define YYCOLUMN(expr,comment)  ((expr))
#endif

void YY2NEWLINE(yyscan_t yyscanner);
void das_accept_cpp_comment ( vector<CommentReader *> & crdi, yyscan_t scanner, DAS2_YYLTYPE & li, const char * text );

#define YY_DECL int yylex(DAS2_YYSTYPE *yylval_param, DAS2_YYLTYPE *yylloc_param, yyscan_t yyscanner)

#define YY_EXTRA_TYPE das::DasParserState *

#line 1257 "ds2_lexer.cpp"
#define YY_NO_UNISTD_H 1
/* %option debug */

#line 1261 "ds2_lexer.cpp"

#define INITIAL 0
#define normal 1
#define strb 2
#define c_comment 3
#define cpp_comment 4
#define include 5
#define reader 6

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 71 "ds2_lexer.lpp"


#line 1544 "ds2_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 687 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 686 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 73 "ds2_lexer.lpp"
{ /* skipping #gen2# text, which indicates type of syntax */ }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 74 "ds2_lexer.lpp"
{
    string txt = yytext;
    int lRow, lCol;
    char lFile[256];
    if ( sscanf ( yytext, "#%i,%i,\"%255s\"#", &lRow, &lCol, lFile )==3 ) {
        lFile[strlen(lFile)-2] = 0;
        auto cfi = yyextra->g_FileAccessStack.back();
        string incFileName = yyextra->g_Access->getIncludeFileName(cfi->name,lFile);
        auto info = yyextra->g_Access->getFileInfo(incFileName);
        if ( !info ) {
            das2_yyfatalerror(yylloc_param,yyscanner,"can't open "+incFileName);
        } else {
            yyextra->g_FileAccessStack.pop_back();
            yyextra->g_FileAccessStack.push_back(info);
            yylineno = lRow;
            YYCOLUMN ( yyextra->das_yycolumn = lCol, "LINE DIRECTIVE");
        }
    } else {
        das2_yyfatalerror(yylloc_param,yyscanner,"can't process line directive " + string(yytext),
            CompilationError::invalid_line_directive); return LEXER_ERROR;
    }
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 96 "ds2_lexer.lpp"
das2_yyfatalerror(yylloc_param,yyscanner,"Unexpected */", CompilationError::unexpected_close_comment); return LEXER_ERROR;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 97 "ds2_lexer.lpp"
{
    BEGIN(c_comment);
    yyextra->das_c_style_depth = 1;
    if ( !yyextra->g_CommentReaders.empty() ) {
        auto tak = tokAt(yyscanner,*yylloc_param);
        for ( auto & crd : yyextra->g_CommentReaders ) crd->open(false, tak);
    }
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 105 "ds2_lexer.lpp"
{
    BEGIN(cpp_comment);
    if ( !yyextra->g_CommentReaders.empty() ) {
        auto tak = tokAt(yyscanner,*yylloc_param);
        for ( auto & crd : yyextra->g_CommentReaders ) crd->open(true, tak);
    }
}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 112 "ds2_lexer.lpp"
{
    BEGIN(normal);
    unput('\n');
    if ( !yyextra->g_CommentReaders.empty() ) {
        auto tak = tokAt(yyscanner,*yylloc_param);
        for ( auto & crd : yyextra->g_CommentReaders ) crd->close(tak);
    }
}
	YY_BREAK
case YY_STATE_EOF(cpp_comment):
#line 120 "ds2_lexer.lpp"
BEGIN(normal);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 121 "ds2_lexer.lpp"
{
    if ( !yyextra->g_CommentReaders.empty() ) {
        auto tak = tokAt(yyscanner,*yylloc_param);
        for ( auto & crd : yyextra->g_CommentReaders ) crd->accept(*yytext, tak);
    }
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 127 "ds2_lexer.lpp"
{
    yyextra->das_c_style_depth ++;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 130 "ds2_lexer.lpp"
{
    yyextra->das_c_style_depth --;
    if ( yyextra->das_c_style_depth==0 ) {
        if ( !yyextra->g_CommentReaders.empty() ) {
            auto tak = tokAt(yyscanner,*yylloc_param);
            for ( auto & crd : yyextra->g_CommentReaders ) crd->close(tak);
        }
        BEGIN(normal);
    }
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 140 "ds2_lexer.lpp"
{                      /* skipping comment body */
    if ( !yyextra->g_CommentReaders.empty() ) {
        auto tak = tokAt(yyscanner,*yylloc_param);
        for ( auto & crd : yyextra->g_CommentReaders ) crd->accept(*yytext, tak);
    }
}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 146 "ds2_lexer.lpp"
{                 /* skipping comment eol */
    if ( !yyextra->g_CommentReaders.empty() ) {
        auto tak = tokAt(yyscanner,*yylloc_param);
        for ( auto & crd : yyextra->g_CommentReaders ) crd->accept(*yytext, tak);
    }
}
	YY_BREAK
case YY_STATE_EOF(c_comment):
#line 152 "ds2_lexer.lpp"
{
    das2_yyfatalerror(yylloc_param,yyscanner,"end of file encountered inside c-style comment", CompilationError::comment_contains_eof);
    BEGIN(normal);
}
	YY_BREAK
case YY_STATE_EOF(reader):
#line 156 "ds2_lexer.lpp"
{
    das2_yyfatalerror(yylloc_param,yyscanner,"reader constant exceeds file", CompilationError::string_constant_exceeds_file);
    BEGIN(normal);
    return END_OF_READ;
}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 161 "ds2_lexer.lpp"
{
    YY2NEWLINE(yyscanner);
    yylval_param->ch = yytext[0];
    return STRING_CHARACTER;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 166 "ds2_lexer.lpp"
{
    yylval_param->ch = yytext[0];
    return STRING_CHARACTER;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 170 "ds2_lexer.lpp"
{
    // assert(nested_sb==0);
    BEGIN(normal);
    return END_STRING;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 175 "ds2_lexer.lpp"
{
    DAS_ASSERT(yyextra->das_nested_sb==0);
    yyextra->das_nested_sb ++;
    BEGIN(normal);
    return BEGIN_STRING_EXPR;
}
	YY_BREAK
case YY_STATE_EOF(strb):
#line 181 "ds2_lexer.lpp"
{
    das2_yyfatalerror(yylloc_param,yyscanner,"string constant exceeds file", CompilationError::string_constant_exceeds_file);
    BEGIN(normal);
    return END_STRING;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 186 "ds2_lexer.lpp"
{
    return STRING_CHARACTER_ESC;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 189 "ds2_lexer.lpp"
{
    yylval_param->ch = yytext[1];
    return STRING_CHARACTER;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 193 "ds2_lexer.lpp"
/* do exactly nothing */
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 194 "ds2_lexer.lpp"
{
    yylval_param->ch = *yytext;
    YY2NEWLINE(yyscanner);
    return STRING_CHARACTER;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 199 "ds2_lexer.lpp"
{
    yylval_param->ch = *yytext;
    return STRING_CHARACTER;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 203 "ds2_lexer.lpp"
{
    yylval_param->ch = *yytext;
    return STRING_CHARACTER;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 207 "ds2_lexer.lpp"
/* eat the whitespace */
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 208 "ds2_lexer.lpp"
{ /* got the include file name */
    auto cfi = yyextra->g_FileAccessStack.back();
    string incFileName = yyextra->g_Access->getIncludeFileName(cfi->name,yytext);
    auto info = yyextra->g_Access->getFileInfo(incFileName);
    if ( !info ) {
        das2_yyfatalerror(yylloc_param,yyscanner,"can't open "+incFileName);
    } else {
        if ( yyextra->das_already_include.find(incFileName) == yyextra->das_already_include.end() ) {
            yyextra->das_already_include.insert(incFileName);
            yyextra->g_FileAccessStack.push_back(info);
            yyextra->das_line_no.push_back(yylineno);
            yylineno = 1;
            yypush_buffer_state(YY_CURRENT_BUFFER, yyscanner);
            const char * src = nullptr;
            uint32_t len = 0;
            info->getSourceAndLength(src, len);
            yy_scan_bytes(src, len, yyscanner);
            yylineno = 1;
        }
    }
    BEGIN(normal);
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 231 "ds2_lexer.lpp"
BEGIN(include);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 232 "ds2_lexer.lpp"
return DAS_CAPTURE;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 233 "ds2_lexer.lpp"
return DAS_FOR;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 234 "ds2_lexer.lpp"
return DAS_WHILE;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 235 "ds2_lexer.lpp"
return DAS_IF;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 236 "ds2_lexer.lpp"
return DAS_STATIC_IF;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 237 "ds2_lexer.lpp"
return DAS_ELIF;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 238 "ds2_lexer.lpp"
return DAS_STATIC_ELIF;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 239 "ds2_lexer.lpp"
return DAS_ELSE;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 240 "ds2_lexer.lpp"
return DAS_FINALLY;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 241 "ds2_lexer.lpp"
return DAS_DEF;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 242 "ds2_lexer.lpp"
return DAS_WITH;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 243 "ds2_lexer.lpp"
return DAS_AKA;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 244 "ds2_lexer.lpp"
return DAS_ASSUME;
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 245 "ds2_lexer.lpp"
{ // TODO: comment reader after let where?
    unput('\n');
    das_accept_cpp_comment(yyextra->g_CommentReaders, yyscanner, *yylloc_param, yytext);
    return DAS_LET;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 250 "ds2_lexer.lpp"
return DAS_LET;
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 251 "ds2_lexer.lpp"
{ // TODO: comment reader after var where?
    unput('\n');
    das_accept_cpp_comment(yyextra->g_CommentReaders, yyscanner, *yylloc_param, yytext);
    return DAS_VAR;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 256 "ds2_lexer.lpp"
return DAS_UNINITIALIZED;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 257 "ds2_lexer.lpp"
return DAS_VAR;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 258 "ds2_lexer.lpp"
return DAS_STRUCT;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 259 "ds2_lexer.lpp"
return DAS_CLASS;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 260 "ds2_lexer.lpp"
return DAS_ENUM;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 261 "ds2_lexer.lpp"
return DAS_TRY;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 262 "ds2_lexer.lpp"
return DAS_CATCH;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 263 "ds2_lexer.lpp"
return DAS_TYPEDEF;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 264 "ds2_lexer.lpp"
return DAS_TYPEDECL;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 265 "ds2_lexer.lpp"
return DAS_LABEL;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 266 "ds2_lexer.lpp"
return DAS_GOTO;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 267 "ds2_lexer.lpp"
return DAS_MODULE;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 268 "ds2_lexer.lpp"
return DAS_PUBLIC;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 269 "ds2_lexer.lpp"
return DAS_OPTIONS;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 270 "ds2_lexer.lpp"
return DAS_OPERATOR;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 271 "ds2_lexer.lpp"
return DAS_REQUIRE;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 272 "ds2_lexer.lpp"
return DAS_TBLOCK;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 273 "ds2_lexer.lpp"
return DAS_TFUNCTION;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 274 "ds2_lexer.lpp"
return DAS_TLAMBDA;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 275 "ds2_lexer.lpp"
return DAS_GENERATOR;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 276 "ds2_lexer.lpp"
return DAS_TTUPLE;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 277 "ds2_lexer.lpp"
return DAS_TVARIANT;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 278 "ds2_lexer.lpp"
return DAS_CONST;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 279 "ds2_lexer.lpp"
return DAS_CONTINUE;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 280 "ds2_lexer.lpp"
return DAS_WHERE;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 281 "ds2_lexer.lpp"
return DAS_CAST;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 282 "ds2_lexer.lpp"
return DAS_UPCAST;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 283 "ds2_lexer.lpp"
return DAS_PASS;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 284 "ds2_lexer.lpp"
return DAS_REINTERPRET;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 285 "ds2_lexer.lpp"
return DAS_OVERRIDE;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 286 "ds2_lexer.lpp"
return DAS_SEALED;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 287 "ds2_lexer.lpp"
return DAS_ABSTRACT;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 288 "ds2_lexer.lpp"
return DAS_EXPECT;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 289 "ds2_lexer.lpp"
return DAS_TABLE;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 290 "ds2_lexer.lpp"
return DAS_ARRAY;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 291 "ds2_lexer.lpp"
return DAS_FIXED_ARRAY;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 292 "ds2_lexer.lpp"
return DAS_DEFAULT;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 293 "ds2_lexer.lpp"
return DAS_ITERATOR;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 294 "ds2_lexer.lpp"
return DAS_IN;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 295 "ds2_lexer.lpp"
return DAS_IMPLICIT;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 296 "ds2_lexer.lpp"
return DAS_EXPLICIT;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 297 "ds2_lexer.lpp"
return DAS_SHARED;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 298 "ds2_lexer.lpp"
return DAS_PRIVATE;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 299 "ds2_lexer.lpp"
return DAS_SMART_PTR;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 300 "ds2_lexer.lpp"
return DAS_UNSAFE;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 301 "ds2_lexer.lpp"
return DAS_INSCOPE;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 302 "ds2_lexer.lpp"
return DAS_STATIC;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 303 "ds2_lexer.lpp"
return DAS_AS;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 304 "ds2_lexer.lpp"
return DAS_IS;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 305 "ds2_lexer.lpp"
return DAS_DEREF;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 306 "ds2_lexer.lpp"
return DAS_ADDR;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 307 "ds2_lexer.lpp"
return DAS_NULL;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 308 "ds2_lexer.lpp"
return DAS_RETURN;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 309 "ds2_lexer.lpp"
return DAS_YIELD;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 310 "ds2_lexer.lpp"
return DAS_BREAK;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 311 "ds2_lexer.lpp"
return DAS_TYPEINFO;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 312 "ds2_lexer.lpp"
return DAS_TYPE;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 313 "ds2_lexer.lpp"
return DAS_NEWT;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 314 "ds2_lexer.lpp"
return DAS_DELETE;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 315 "ds2_lexer.lpp"
return DAS_TRUE;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 316 "ds2_lexer.lpp"
return DAS_FALSE;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 317 "ds2_lexer.lpp"
return DAS_TAUTO;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 318 "ds2_lexer.lpp"
return DAS_TBOOL;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 319 "ds2_lexer.lpp"
return DAS_TVOID;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 320 "ds2_lexer.lpp"
return DAS_TSTRING;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 321 "ds2_lexer.lpp"
return DAS_TRANGE64;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 322 "ds2_lexer.lpp"
return DAS_TURANGE64;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 323 "ds2_lexer.lpp"
return DAS_TRANGE;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 324 "ds2_lexer.lpp"
return DAS_TURANGE;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 325 "ds2_lexer.lpp"
return DAS_TINT;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 326 "ds2_lexer.lpp"
return DAS_TINT8;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 327 "ds2_lexer.lpp"
return DAS_TINT16;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 328 "ds2_lexer.lpp"
return DAS_TINT64;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 329 "ds2_lexer.lpp"
return DAS_TINT2;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 330 "ds2_lexer.lpp"
return DAS_TINT3;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 331 "ds2_lexer.lpp"
return DAS_TINT4;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 332 "ds2_lexer.lpp"
return DAS_TUINT;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 333 "ds2_lexer.lpp"
return DAS_TBITFIELD;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 334 "ds2_lexer.lpp"
return DAS_TUINT8;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 335 "ds2_lexer.lpp"
return DAS_TUINT16;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 336 "ds2_lexer.lpp"
return DAS_TUINT64;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 337 "ds2_lexer.lpp"
return DAS_TUINT2;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 338 "ds2_lexer.lpp"
return DAS_TUINT3;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 339 "ds2_lexer.lpp"
return DAS_TUINT4;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 340 "ds2_lexer.lpp"
return DAS_TDOUBLE;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 341 "ds2_lexer.lpp"
return DAS_TFLOAT;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 342 "ds2_lexer.lpp"
return DAS_TFLOAT2;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 343 "ds2_lexer.lpp"
return DAS_TFLOAT3;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 344 "ds2_lexer.lpp"
return DAS_TFLOAT4;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 345 "ds2_lexer.lpp"
{
    yylval_param->s = new string(yytext);
    return NAME;
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 349 "ds2_lexer.lpp"
{
        BEGIN(strb);
        return BEGIN_STRING;
    }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 353 "ds2_lexer.lpp"
yylval_param->ui = 8; return UNSIGNED_INT8;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 354 "ds2_lexer.lpp"
yylval_param->ui = 9; return UNSIGNED_INT8;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 355 "ds2_lexer.lpp"
yylval_param->ui = 10; return UNSIGNED_INT8;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 356 "ds2_lexer.lpp"
yylval_param->ui = 12; return UNSIGNED_INT8;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 357 "ds2_lexer.lpp"
yylval_param->ui = 13; return UNSIGNED_INT8;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 358 "ds2_lexer.lpp"
yylval_param->ui = '\\'; return UNSIGNED_INT8;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 359 "ds2_lexer.lpp"
yylval_param->ui = uint32_t(yytext[1]); return UNSIGNED_INT8;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 361 "ds2_lexer.lpp"
yylval_param->ui = 8; return UNSIGNED_INTEGER;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 362 "ds2_lexer.lpp"
yylval_param->ui = 9; return UNSIGNED_INTEGER;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 363 "ds2_lexer.lpp"
yylval_param->ui = 10; return UNSIGNED_INTEGER;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 364 "ds2_lexer.lpp"
yylval_param->ui = 12; return UNSIGNED_INTEGER;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 365 "ds2_lexer.lpp"
yylval_param->ui = 13; return UNSIGNED_INTEGER;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 366 "ds2_lexer.lpp"
yylval_param->ui = '\\'; return UNSIGNED_INTEGER;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 367 "ds2_lexer.lpp"
yylval_param->ui = uint32_t(yytext[1]); return UNSIGNED_INTEGER;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 369 "ds2_lexer.lpp"
yylval_param->i = 8; return INTEGER;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 370 "ds2_lexer.lpp"
yylval_param->i = 9; return INTEGER;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 371 "ds2_lexer.lpp"
yylval_param->i = 10; return INTEGER;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 372 "ds2_lexer.lpp"
yylval_param->i = 12; return INTEGER;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 373 "ds2_lexer.lpp"
yylval_param->i = 13; return INTEGER;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 374 "ds2_lexer.lpp"
yylval_param->i = '\\'; return INTEGER;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 376 "ds2_lexer.lpp"
yylval_param->i = int32_t(yytext[1]); return INTEGER;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 377 "ds2_lexer.lpp"
{
        char temptext[128];
        int templength = skip_underscode(yytext,temptext,temptext+sizeof(temptext));
        auto res = fast_float::from_chars(temptext, temptext+templength, yylval_param->ui64);
        if ( res.ec == std::errc::result_out_of_range ) {
            das2_yyfatalerror(yylloc_param,yyscanner,"uint64 constant out of range", CompilationError::integer_constant_out_of_range);
        } else if ( res.ec != std::errc() || res.ptr != temptext+templength-2 ) {
            return LEXER_ERROR;
        }
        return UNSIGNED_LONG_INTEGER;
    }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 388 "ds2_lexer.lpp"
{
        char temptext[128];
        int templength = skip_underscode(yytext,temptext,temptext+sizeof(temptext));
        auto res = fast_float::from_chars(temptext, temptext+templength, yylval_param->i64);
        if ( res.ec == std::errc::result_out_of_range ) {
            das2_yyfatalerror(yylloc_param,yyscanner,"int64 constant out of range", CompilationError::integer_constant_out_of_range);
        } else if ( res.ec != std::errc() || res.ptr != temptext+templength-1 ) {
            return LEXER_ERROR;
        }
        return LONG_INTEGER;
    }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 399 "ds2_lexer.lpp"
{
        char temptext[128];
        int templength = skip_underscode(yytext,temptext,temptext+sizeof(temptext));
        uint8_t u8_const;
        auto res = fast_float::from_chars(temptext, temptext+templength, u8_const);
        if ( res.ec == std::errc::result_out_of_range ) {
            das2_yyfatalerror(yylloc_param,yyscanner,"uint8 constant out of range", CompilationError::integer_constant_out_of_range);
        } else if ( res.ec != std::errc() || res.ptr != temptext+templength-2 ) {
            return LEXER_ERROR;
        }
        yylval_param->ui = u8_const;
        return UNSIGNED_INT8;
    }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 412 "ds2_lexer.lpp"
{
        char temptext[128];
        int templength = skip_underscode(yytext,temptext,temptext+sizeof(temptext));
        auto res = fast_float::from_chars(temptext, temptext+templength, yylval_param->ui);
        if ( res.ec == std::errc::result_out_of_range ) {
            das2_yyfatalerror(yylloc_param,yyscanner,"uint constant out of range", CompilationError::integer_constant_out_of_range);
        } else if ( res.ec != std::errc() || res.ptr != temptext+templength-1 ) {
            return LEXER_ERROR;
        }
        return UNSIGNED_INTEGER;
    }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 423 "ds2_lexer.lpp"
{
        char temptext[128];
        int templength = skip_underscode(yytext,temptext,temptext+sizeof(temptext));
        auto res = fast_float::from_chars(temptext, temptext+templength, yylval_param->i);
        if ( res.ec == std::errc::result_out_of_range ) {
            das2_yyfatalerror(yylloc_param,yyscanner,"int constant out of range", CompilationError::integer_constant_out_of_range);
        } else if ( res.ec != std::errc() || res.ptr != temptext+templength-2 ) {
            return LEXER_ERROR;
        }
        unput('.');
        YYCOLUMN(yyextra->das_yycolumn--, "UNPUT .");
        unput('.');
        YYCOLUMN(yyextra->das_yycolumn--, "UNPUT .");
        return INTEGER;
    }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 438 "ds2_lexer.lpp"
{
        char temptext[128];
        int templength = skip_underscode(yytext,temptext,temptext+sizeof(temptext));
        auto res = fast_float::from_chars(temptext, temptext+templength, yylval_param->i);
        if ( res.ec == std::errc::result_out_of_range ) {
            das2_yyfatalerror(yylloc_param,yyscanner,"int constant out of range", CompilationError::integer_constant_out_of_range);
        } else if ( res.ec != std::errc() || res.ptr != temptext+templength ) {
            return LEXER_ERROR;
        }
        return INTEGER;
    }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 449 "ds2_lexer.lpp"
{
        char temptext[128];
        skip_underscode(yytext,temptext,temptext+sizeof(temptext));
        auto res = fast_float::from_chars(temptext + 2, temptext+strlen(temptext), yylval_param->ui64, 16);
        if ( res.ec == std::errc::result_out_of_range ) {
            das2_yyfatalerror(yylloc_param,yyscanner,"uint64 constant out of range", CompilationError::integer_constant_out_of_range);
        } else if ( res.ec != std::errc() || res.ptr != temptext+strlen(temptext)-2 ) {
            return LEXER_ERROR;
        }
        return UNSIGNED_LONG_INTEGER;
    }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 460 "ds2_lexer.lpp"
{
        char temptext[128];
        skip_underscode(yytext,temptext,temptext+sizeof(temptext));
        auto res = fast_float::from_chars(temptext + 2, temptext+strlen(temptext), yylval_param->ui64, 16);
        if ( res.ec == std::errc::result_out_of_range ) {
            das2_yyfatalerror(yylloc_param,yyscanner,"int64 constant out of range", CompilationError::integer_constant_out_of_range);
        } else if ( res.ec != std::errc() || res.ptr != temptext+strlen(temptext)-1 ) {
            return LEXER_ERROR;
        }
        return UNSIGNED_LONG_INTEGER;
    }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 471 "ds2_lexer.lpp"
{
        char temptext[128];
        int templength = skip_underscode(yytext,temptext,temptext+sizeof(temptext));
        if ( templength>2 && (temptext[templength-2]=='u' || temptext[templength-2]=='U') && temptext[templength-1]=='8' ) {
            uint8_t u8_const;
            auto res = fast_float::from_chars(temptext + 2, temptext+strlen(temptext)-2, u8_const, 16);
            if ( res.ec == std::errc::result_out_of_range ) {
                das2_yyfatalerror(yylloc_param,yyscanner,"uint8 constant out of range", CompilationError::integer_constant_out_of_range);
            } else if ( res.ec != std::errc() || res.ptr != temptext+strlen(temptext)-2 ) {
                return LEXER_ERROR;
            }
            yylval_param->ui = u8_const;
            return UNSIGNED_INT8;
        } else {
            auto res = fast_float::from_chars(temptext + 2, temptext+strlen(temptext), yylval_param->ui, 16);
            if ( res.ec == std::errc::result_out_of_range ) {
                das2_yyfatalerror(yylloc_param,yyscanner,"uint constant out of range", CompilationError::integer_constant_out_of_range);
            } else if ( res.ec != std::errc() || res.ptr != temptext+strlen(temptext)-1 ) {
                return LEXER_ERROR;
            }
            return UNSIGNED_INTEGER;
        }
    }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 494 "ds2_lexer.lpp"
{
        char temptext[128];
        skip_underscode(yytext,temptext,temptext+sizeof(temptext));
        auto res = fast_float::from_chars(temptext + 2, temptext+strlen(temptext), yylval_param->ui, 16);
        if ( res.ec == std::errc::result_out_of_range ) {
            das2_yyfatalerror(yylloc_param,yyscanner,"uint constant out of range", CompilationError::integer_constant_out_of_range);
        } else if ( res.ec != std::errc() || res.ptr != temptext+strlen(temptext) ) {
            return LEXER_ERROR;
        }
        return UNSIGNED_INTEGER;
    }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 505 "ds2_lexer.lpp"
{
    auto res = fast_float::from_chars(yytext, yytext+strlen(yytext), yylval_param->fd);
    if ( res.ec == std::errc::result_out_of_range ) {
        das2_yyfatalerror(yylloc_param,yyscanner,"float constant out of range", CompilationError::floating_point_constant_out_of_range);
    } else if ( res.ec != std::errc() ) {
        return LEXER_ERROR;
    }
    return FLOAT;
}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 514 "ds2_lexer.lpp"
{
    auto res = fast_float::from_chars(yytext, yytext+strlen(yytext), yylval_param->fd);
    if ( res.ec == std::errc::result_out_of_range ) {
        das2_yyfatalerror(yylloc_param,yyscanner,"float constant out of range", CompilationError::floating_point_constant_out_of_range);
    } else if ( res.ec != std::errc() ) {
        return LEXER_ERROR;
    }
    return FLOAT;

}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 524 "ds2_lexer.lpp"
{
    auto res = fast_float::from_chars(yytext, yytext+strlen(yytext), yylval_param->fd);
    if ( res.ec == std::errc::result_out_of_range ) {
        das2_yyfatalerror(yylloc_param,yyscanner,"float constant out of range", CompilationError::floating_point_constant_out_of_range);
    } else if ( res.ec != std::errc() ) {
        return LEXER_ERROR;
    }
    return FLOAT;
}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 533 "ds2_lexer.lpp"
{
    auto res = fast_float::from_chars(yytext, yytext+strlen(yytext), yylval_param->fd);
    if ( res.ec == std::errc::result_out_of_range ) {
        das2_yyfatalerror(yylloc_param,yyscanner,"float constant out of range", CompilationError::floating_point_constant_out_of_range);
    } else if ( res.ec != std::errc() ) {
        return LEXER_ERROR;
    }
    return FLOAT;
}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 542 "ds2_lexer.lpp"
{
    auto res = fast_float::from_chars(yytext, yytext+strlen(yytext), yylval_param->d);
    if ( res.ec == std::errc::result_out_of_range ) {
        das2_yyfatalerror(yylloc_param,yyscanner,"double constant out of range", CompilationError::floating_point_constant_out_of_range);
    } else if ( res.ec != std::errc() ) {
        return LEXER_ERROR;
    }
    return DOUBLE;
}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 551 "ds2_lexer.lpp"
{
    auto res = fast_float::from_chars(yytext, yytext+strlen(yytext), yylval_param->d);
    if ( res.ec == std::errc::result_out_of_range ) {
        das2_yyfatalerror(yylloc_param,yyscanner,"double constant out of range", CompilationError::floating_point_constant_out_of_range);
    } else if ( res.ec != std::errc() ) {
        return LEXER_ERROR;
    }
    return DOUBLE;
}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 560 "ds2_lexer.lpp"
{
    auto res = fast_float::from_chars(yytext, yytext+strlen(yytext), yylval_param->d);
    if ( res.ec == std::errc::result_out_of_range ) {
        das2_yyfatalerror(yylloc_param,yyscanner,"double constant out of range", CompilationError::floating_point_constant_out_of_range);
    } else if ( res.ec != std::errc() ) {
        return LEXER_ERROR;
    }
    return DOUBLE;
}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 569 "ds2_lexer.lpp"
{
    auto res = fast_float::from_chars(yytext, yytext+strlen(yytext), yylval_param->d);
    if ( res.ec == std::errc::result_out_of_range ) {
        das2_yyfatalerror(yylloc_param,yyscanner,"double constant out of range", CompilationError::floating_point_constant_out_of_range);
    } else if ( res.ec != std::errc() ) {
        return LEXER_ERROR;
    }
    return DOUBLE;
}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 578 "ds2_lexer.lpp"
{
    if ( !yyextra->das_nested_parentheses ) {
        das2_yyfatalerror(yylloc_param,yyscanner,"mismatching parentheses", CompilationError::mismatching_parentheses);
        return LEXER_ERROR;
    }
    yyextra->das_nested_parentheses --;
    return ')';
}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 586 "ds2_lexer.lpp"
{
    yyextra->das_nested_parentheses ++;
    return '(';
}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 590 "ds2_lexer.lpp"
{
    if ( !yyextra->das_nested_square_braces ) {
        das2_yyfatalerror(yylloc_param,yyscanner,"mismatching square braces", CompilationError::mismatching_parentheses);
        return LEXER_ERROR;
    }
    yyextra->das_nested_square_braces --;
    return ']';
}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 598 "ds2_lexer.lpp"
{
    yyextra->das_nested_square_braces ++;
    return '[';
}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 602 "ds2_lexer.lpp"
{
    if ( yyextra->das_nested_sb ) {
        yyextra->das_nested_sb --;
        if ( !yyextra->das_nested_sb ) {
            BEGIN(strb);
            return END_STRING_EXPR;
        } else {
            return '}';
        }
    } else {
        if ( !yyextra->das_nested_curly_braces ) {
            das2_yyfatalerror(yylloc_param,yyscanner,"mismatching curly braces", CompilationError::mismatching_curly_bracers);
            return '}';
        }
        yyextra->das_nested_curly_braces --;
        return '}';
    }
}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 620 "ds2_lexer.lpp"
{
    if ( yyextra->das_nested_sb ) {
        yyextra->das_nested_sb ++;
    } else {
        yyextra->das_nested_curly_braces ++;
    }
    return '{';
}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 628 "ds2_lexer.lpp"
return COLCOL;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 629 "ds2_lexer.lpp"
return MTAG_DOTDOTDOT;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 630 "ds2_lexer.lpp"
return DOTDOT;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 631 "ds2_lexer.lpp"
return RPIPE;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 632 "ds2_lexer.lpp"
return LPIPE;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 633 "ds2_lexer.lpp"
return MTAG_E;
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 634 "ds2_lexer.lpp"
unput(yytext[yyleng-1]); return MTAG_E;
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 635 "ds2_lexer.lpp"
unput(yytext[yyleng-1]); return MTAG_I;
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 636 "ds2_lexer.lpp"
unput(yytext[yyleng-1]); return MTAG_V;
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 637 "ds2_lexer.lpp"
unput(yytext[yyleng-1]); return MTAG_B;
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 638 "ds2_lexer.lpp"
unput(yytext[yyleng-1]); return MTAG_A;
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 639 "ds2_lexer.lpp"
unput(yytext[yyleng-1]); return MTAG_T;
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 640 "ds2_lexer.lpp"
unput(yytext[yyleng-1]); return MTAG_C;
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 641 "ds2_lexer.lpp"
unput(yytext[yyleng-1]); return MTAG_F;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 642 "ds2_lexer.lpp"
return QQ;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 643 "ds2_lexer.lpp"
{
    yyextra->das_nested_square_braces ++;
    return QBRA;
}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 647 "ds2_lexer.lpp"
return QDOT;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 648 "ds2_lexer.lpp"
return CLONEEQU;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 649 "ds2_lexer.lpp"
return RARROW;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 650 "ds2_lexer.lpp"
return LARROW;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 651 "ds2_lexer.lpp"
return ADDEQU;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 652 "ds2_lexer.lpp"
return SUBEQU;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 653 "ds2_lexer.lpp"
return DIVEQU;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 654 "ds2_lexer.lpp"
return MULEQU;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 655 "ds2_lexer.lpp"
return MODEQU;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 656 "ds2_lexer.lpp"
return ANDANDEQU;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 657 "ds2_lexer.lpp"
return OROREQU;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 658 "ds2_lexer.lpp"
return XORXOREQU;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 659 "ds2_lexer.lpp"
return ANDAND;
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 660 "ds2_lexer.lpp"
return OROR;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 661 "ds2_lexer.lpp"
return XORXOR;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 662 "ds2_lexer.lpp"
return ANDEQU;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 663 "ds2_lexer.lpp"
return OREQU;
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 664 "ds2_lexer.lpp"
return XOREQU;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 665 "ds2_lexer.lpp"
return ADDADD;
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 666 "ds2_lexer.lpp"
return SUBSUB;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 667 "ds2_lexer.lpp"
return LEEQU;
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 668 "ds2_lexer.lpp"
return GREQU;
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 669 "ds2_lexer.lpp"
return EQUEQU;
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 670 "ds2_lexer.lpp"
return NOTEQU;
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 671 "ds2_lexer.lpp"
{
    if ( yyextra->das_arrow_depth ) {
        unput('>');
        unput('>');
        YYCOLUMN(yyextra->das_yycolumn-=2, "UNPUT");
        return '>';
    } else {
        return ROTR;
    }
}
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 681 "ds2_lexer.lpp"
{
    if ( yyextra->das_arrow_depth ) {
        unput('>');
        YYCOLUMN(yyextra->das_yycolumn--, "UNPUT");
        return '>';
    } else {
        return SHR;
    }
}
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 690 "ds2_lexer.lpp"
return ROTL;
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 691 "ds2_lexer.lpp"
return SHL;
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 692 "ds2_lexer.lpp"
return SHREQU;
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 693 "ds2_lexer.lpp"
return SHLEQU;
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 694 "ds2_lexer.lpp"
return ROTREQU;
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 695 "ds2_lexer.lpp"
return ROTLEQU;
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 696 "ds2_lexer.lpp"
return MAPTO;
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 697 "ds2_lexer.lpp"
/* skip white space */
	YY_BREAK
case 227:
/* rule 227 can match eol */
YY_RULE_SETUP
#line 699 "ds2_lexer.lpp"
{
    if ( yyextra->das_nested_curly_braces < 2 ) {
        das2_yyfatalerror(yylloc_param,yyscanner,"mismatching curly braces", CompilationError::mismatching_parentheses);
        return LEXER_ERROR;
    }
    yyextra->das_nested_curly_braces -= 2;
    return SEMICOLON_CUR_CUR;
}
	YY_BREAK
case 228:
/* rule 228 can match eol */
YY_RULE_SETUP
#line 708 "ds2_lexer.lpp"
{
    if ( !yyextra->das_nested_curly_braces ) {
        das2_yyfatalerror(yylloc_param,yyscanner,"mismatching curly braces", CompilationError::mismatching_parentheses);
        return LEXER_ERROR;
    }
    if ( !yyextra->das_nested_square_braces ) {
        das2_yyfatalerror(yylloc_param,yyscanner,"mismatching square braces", CompilationError::mismatching_parentheses);
        return LEXER_ERROR;
    }
    yyextra->das_nested_curly_braces --;
    yyextra->das_nested_square_braces --;
    return SEMICOLON_CUR_SQR;
}
	YY_BREAK
case 229:
/* rule 229 can match eol */
YY_RULE_SETUP
#line 722 "ds2_lexer.lpp"
{
    if ( !yyextra->das_nested_curly_braces ) {
        das2_yyfatalerror(yylloc_param,yyscanner,"mismatching curly braces", CompilationError::mismatching_parentheses);
        return LEXER_ERROR;
    }
    if ( !yyextra->das_nested_square_braces ) {
        das2_yyfatalerror(yylloc_param,yyscanner,"mismatching square braces", CompilationError::mismatching_parentheses);
        return LEXER_ERROR;
    }
    yyextra->das_nested_curly_braces --;
    yyextra->das_nested_square_braces --;
    return COMMA_CUR_SQR;
}
	YY_BREAK
case 230:
/* rule 230 can match eol */
YY_RULE_SETUP
#line 736 "ds2_lexer.lpp"
{
    if ( yyextra->das_nested_square_braces < 2) {
        das2_yyfatalerror(yylloc_param,yyscanner,"mismatching square braces", CompilationError::mismatching_parentheses);
        return LEXER_ERROR;
    }
    yyextra->das_nested_square_braces -= 2;
    return SEMICOLON_SQR_SQR;
}
	YY_BREAK
case 231:
/* rule 231 can match eol */
YY_RULE_SETUP
#line 745 "ds2_lexer.lpp"
{
    if ( yyextra->das_nested_square_braces < 2) {
        das2_yyfatalerror(yylloc_param,yyscanner,"mismatching square braces", CompilationError::mismatching_parentheses);
        return LEXER_ERROR;
    }
    yyextra->das_nested_square_braces -= 2;
    return COMMA_SQR_SQR;
}
	YY_BREAK
case 232:
/* rule 232 can match eol */
YY_RULE_SETUP
#line 753 "ds2_lexer.lpp"
{
    YYCOLUMN(yyextra->das_yycolumn = 0, "NEW LINE");
}
	YY_BREAK
case 233:
/* rule 233 can match eol */
YY_RULE_SETUP
#line 756 "ds2_lexer.lpp"
{
    YYCOLUMN(yyextra->das_yycolumn = 0, "NEW LINE");
    das_accept_cpp_comment(yyextra->g_CommentReaders, yyscanner, *yylloc_param, yytext);
}
	YY_BREAK
case YY_STATE_EOF(normal):
#line 760 "ds2_lexer.lpp"
{
    if ( yyextra->g_FileAccessStack.size()==1 ) {
        YYCOLUMN(yyextra->das_yycolumn = 0,"EOF");
        return 0;
    } else {
        yypop_buffer_state(yyscanner);
        yyextra->g_FileAccessStack.pop_back();
        yylineno = yyextra->das_line_no.back();
        yyextra->das_line_no.pop_back();
    }
}
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 771 "ds2_lexer.lpp"
return *yytext;
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 773 "ds2_lexer.lpp"
ECHO;
	YY_BREAK
#line 3277 "ds2_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(include):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 687 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 687 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 686);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 773 "ds2_lexer.lpp"


void das2_accept_sequence ( yyscan_t yyscanner, const char * seq, size_t seqLen, int lineNo, FileInfo * info ) {
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    auto infoPtr = info ? info : yyextra->g_FileAccessStack.back();
    yyextra->g_FileAccessStack.push_back(infoPtr);
    yyextra->das_line_no.push_back(yylineno);
    yypush_buffer_state(YY_CURRENT_BUFFER, yyscanner);
    yy_scan_bytes(seq, seqLen, yyscanner);
    yylineno = lineNo;
    BEGIN(normal);
}

void das2_yybegin_reader ( yyscan_t yyscanner ) {
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    BEGIN(reader);
}

void das2_yyend_reader ( yyscan_t yyscanner ) {
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    BEGIN(normal);
}

#if DAS2_YYDEBUG
extern int das2_yydebug;
#endif

void das2_collect_keywords ( Module * mod, yyscan_t yyscanner ) {
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    for ( auto & kwd : mod->keywords ) {
        auto it = yyextra->das_keywords.find(kwd.first);
        if ( it != yyextra->das_keywords.end() && it->second.keyword!=kwd.first ) {
            yyextra->g_Program->error("mismatching keyword " + kwd.first + " in module " + mod->name,
                it->second.keyword + " is already defined","",LineInfo());
            return;
        }
        yyextra->das_keywords[kwd.first] = DasKeyword{kwd.second,false,kwd.first};
    }
    for ( auto & tfun : mod->typeFunctions ) {
        string keyword = mod->name.empty() ? tfun : mod->name + "::" + tfun;
        auto it = yyextra->das_keywords.find(tfun);
        if ( it != yyextra->das_keywords.end() && it->second.keyword!=keyword ) {
            yyextra->g_Program->error("mismatching type function " + tfun + " in module " + mod->name,
                it->second.keyword + " is already defined","",LineInfo());
            return;
        }
        yyextra->das_keywords[tfun] = DasKeyword{false,true,keyword};
    }
}

void das2_yybegin(const char * str, uint32_t len, yyscan_t yyscanner ) {
    printf("DAS VERSION 2 SYNTAX\n");
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra->g_thisStructure = nullptr;
    yyextra->das_module_alias.clear();
    yyextra->das_already_include.clear();
    yyextra->das_keywords.clear();
#if DAS2_YYDEBUG
    das2_yydebug = 0;
#endif
    yyextra->das_line_no.clear();
    YYCOLUMN(yyextra->das_yycolumn = 0,"YYBEGIN");
    yyextra->das_nested_parentheses = 0;
    yyextra->das_nested_curly_braces = 0;
    yyextra->das_nested_square_braces = 0;
    yyextra->das_nested_sb = 0;
    yyextra->das_c_style_depth = 0;
    yyextra->das_arrow_depth = 0;
    yyextra->g_CommentReaders.clear();
    yyextra->g_ReaderMacro = nullptr;
    yyextra->g_ReaderExpr = nullptr;
    BEGIN(normal);
    yy_scan_bytes(str, len, yyscanner);
    yylineno = 1;
}

void YY2NEWLINE ( yyscan_t yyscanner ) {
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    YYCOLUMN(yyextra->das_yycolumn = 0,"NEW LINE");
}

void das_accept_cpp_comment ( vector<CommentReader *> & crdi, yyscan_t scanner, DAS2_YYLTYPE & li, const char * text ) {
    if ( crdi.empty() ) return;
    while ( !(text[0]=='/' && text[1]=='/') && *text ) text ++;
    if ( *text==0 ) return;
    auto tak = tokAt(scanner,li);
    for ( auto & crd : crdi ) crd->open(false, tak);
    for ( auto ch = text + 2; *ch!='\n'; ++ch ) {
        if ( *ch!='\r' ) {
            for ( auto & crd : crdi ) crd->accept(*ch, tak);
        }
    }
    for ( auto & crd : crdi ) crd->close(tak);
}


